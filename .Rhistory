N = mu_df$trait %>% length(),
y = mu_df$trait,
x = mu_df$x,
numSpp = mu_df$spp %>% unique() %>% length(),
sppint = mu_df$spp,
a_pr_mu = 4, a_pr_sig = 2,
b_pr_mu = 4, b_pr_sig = 2,
c_pr_mu = 0, c_pr_sig = 2,
d_pr_mu = min(mu_df$x)*0.9, d_pr_sig = 2,
e_pr_mu = max(mu_df$x)*0.9, e_pr_sig = 2
)
stan_out <- sampling(mod, data = stan_in)
stan_out
posts <- extract(stan_out)
params <- c("a", "b", "c", "d", "e", "nu")
sim_val <- params %>% map(function(p){
qs <- apply(posts[[p]], 2, quantile, probs = c(0.025,0.975))
truth <- eval(parse(text = p))
lglz <- seq_along(truth) %>% map_lgl(~{
qs[1, .x] < truth[.x] & qs[2,.x] > truth[.x]
}) %>% mean()
probs <- 1:ncol(posts[[p]]) %>%
map_dbl(function(xx){mean(posts[[p]][,xx] > truth[xx])})
list(lglz = lglz, probs = probs)
})
names(sim_val) <- params
sim_val %>% map_dbl(~{.$lgl})
#sim_val %>% map(~{.$probs})
sim_val %>% map(~{.$probs})
qs <- apply(posts[[p]], 2, quantile, probs = c(0.025,0.975))
truth <- eval(parse(text = p))
p <- "nu"
qs <- apply(posts[[p]], 2, quantile, probs = c(0.025,0.975))
truth <- eval(parse(text = p))
qs
truth
#source("tolerance_functions.R")
#number of samples along x
n_axis <- 5
n_reps <- 10
n_spp <- 2
#priors
a_pr_mu <- 4
a_pr_sig <- 2
b_pr_mu <- 4
b_pr_sig <- 2
c_pr_mu <- 0
c_pr_sig <- 2
d_pr_mu <- -1
d_pr_sig <- 2
e_pr_mu <- 7
e_pr_sig <- 2
#generate parameters
mu_a <- rnorm(1, a_pr_mu, a_pr_sig)
a <- truncnorm::rtruncnorm(n_spp, a = 2, mean = mu_a, sd = 1)
mu_b <- rnorm(1, b_pr_mu, b_pr_sig)
b <- truncnorm::rtruncnorm(n_spp, a = 2, mean = mu_b, sd = 1)
mu_c <- rnorm(1, c_pr_mu, c_pr_sig)
c <- truncnorm::rtruncnorm(n_spp, a = 0, mean = mu_c, sd = 1)
mu_d <- rnorm(1, d_pr_mu, d_pr_sig)
d <- rnorm(n_spp, mu_d, 1)
mu_e <- rnorm(1, e_pr_mu, e_pr_sig)
e <- rnorm(n_spp, mu_e, 1)
mu_nu <- truncnorm::rtruncnorm(1, a = 0, mean = 0, sd = 1)
nu <- rgamma(n_spp, shape = 10, scale = mu_nu)
(1/nu) %>% sort(decreasing = F)
#nu <- rbeta(n_spp, 1, 2)
#nu is insanse variably under prior, so limiting it this way for sims
#(nu <- rtruncnorm(n = n_spp, a = 0, mean = 0, sd = 1) )
#nu <- rep(0.01, n_spp)
#samples can be (-Inf, Inf) along x, but some positions will be more informative than others
x_lo <- rnorm(1, mean = mean(d), sd = .1)
x_hi <- rnorm(1, mean = mean(e), sd = .1)
if(x_lo > x_hi){
x_lo <- x_lo + x_hi
x_hi <- x_lo - x_hi
x_lo <- x_lo - x_hi
}
# xseq <- runif(n_axis, x_lo, x_hi) %>% sort() %>%
#   rep(each = n_reps)
xseq <- seq(x_lo, x_hi, length.out = n_axis) %>%
rep(each = n_reps)
mu_df <- 1:n_spp %>% map_df(~{
mu <- tolerance_mu(xs = xseq, a[.x], b[.x], c[.x], d[.x], e[.x])
zero_idx <- xseq < d[.x] | xseq > e[.x]
mu_spp <- mu %>%
map_dbl(function(x){
rnorm(n = 1, mean = x, sd = (1+x)*1/nu[.x]) %>%
(function(z) ifelse(z < 0, 0, z))
}) %>%
replace(zero_idx, 0)
tibble(trait = mu_spp, mu = mu, spp = rep(.x, length(mu)))
}) %>%
mutate(x = rep(xseq, n_spp))
range(mu_df$trait)
mu_df %>%
ggplot(aes(x, trait, colour = as.character(spp))) +
geom_jitter(width = .5,alpha = 0.5) +
theme(legend.position = "none") +
theme_minimal()
mod <- rstan::stan_model("bayes/tolerance_curve_scnrm.stan")
stan_in <- list(
N = mu_df$trait %>% length(),
y = mu_df$trait,
x = mu_df$x,
numSpp = mu_df$spp %>% unique() %>% length(),
sppint = mu_df$spp,
a_pr_mu = 4, a_pr_sig = 2,
b_pr_mu = 4, b_pr_sig = 2,
c_pr_mu = 0, c_pr_sig = 2,
d_pr_mu = min(mu_df$x)*0.9, d_pr_sig = 2,
e_pr_mu = max(mu_df$x)*0.9, e_pr_sig = 2
)
stan_out <- sampling(mod, data = stan_in)
stan_out
posts <- extract(stan_out)
p <- "nu"
params <- c("a", "b", "c", "d", "e", "nu")
sim_val <- params %>% map(function(p){
qs <- apply(posts[[p]], 2, quantile, probs = c(0.025,0.975))
truth <- eval(parse(text = p))
lglz <- seq_along(truth) %>% map_lgl(~{
qs[1, .x] < truth[.x] & qs[2,.x] > truth[.x]
}) %>% mean()
probs <- 1:ncol(posts[[p]]) %>%
map_dbl(function(xx){mean(posts[[p]][,xx] > truth[xx])})
list(lglz = lglz, probs = probs)
})
names(sim_val) <- params
sim_val %>% map_dbl(~{.$lgl})
sim_val %>% map(~{.$probs})
sim_val %>% map_dbl(~{.$lgl})
#source("tolerance_functions.R")
#number of samples along x
n_axis <- 5
n_reps <- 10
n_spp <- 2
#priors
a_pr_mu <- 4
a_pr_sig <- 2
b_pr_mu <- 4
b_pr_sig <- 2
c_pr_mu <- 0
c_pr_sig <- 2
d_pr_mu <- -1
d_pr_sig <- 2
e_pr_mu <- 7
e_pr_sig <- 2
#generate parameters
mu_a <- rnorm(1, a_pr_mu, a_pr_sig)
a <- truncnorm::rtruncnorm(n_spp, a = 2, mean = mu_a, sd = 1)
mu_b <- rnorm(1, b_pr_mu, b_pr_sig)
b <- truncnorm::rtruncnorm(n_spp, a = 2, mean = mu_b, sd = 1)
mu_c <- rnorm(1, c_pr_mu, c_pr_sig)
c <- truncnorm::rtruncnorm(n_spp, a = 0, mean = mu_c, sd = 1)
mu_d <- rnorm(1, d_pr_mu, d_pr_sig)
d <- rnorm(n_spp, mu_d, 1)
mu_e <- rnorm(1, e_pr_mu, e_pr_sig)
e <- rnorm(n_spp, mu_e, 1)
mu_nu <- truncnorm::rtruncnorm(1, a = 0, mean = 0, sd = 1)
nu <- rgamma(n_spp, shape = 10, scale = mu_nu)
(1/nu) %>% sort(decreasing = F)
#nu <- rbeta(n_spp, 1, 2)
#nu is insanse variably under prior, so limiting it this way for sims
#(nu <- rtruncnorm(n = n_spp, a = 0, mean = 0, sd = 1) )
#nu <- rep(0.01, n_spp)
#samples can be (-Inf, Inf) along x, but some positions will be more informative than others
x_lo <- rnorm(1, mean = mean(d), sd = .1)
x_hi <- rnorm(1, mean = mean(e), sd = .1)
if(x_lo > x_hi){
x_lo <- x_lo + x_hi
x_hi <- x_lo - x_hi
x_lo <- x_lo - x_hi
}
# xseq <- runif(n_axis, x_lo, x_hi) %>% sort() %>%
#   rep(each = n_reps)
xseq <- seq(x_lo, x_hi, length.out = n_axis) %>%
rep(each = n_reps)
mu_df <- 1:n_spp %>% map_df(~{
mu <- tolerance_mu(xs = xseq, a[.x], b[.x], c[.x], d[.x], e[.x])
zero_idx <- xseq < d[.x] | xseq > e[.x]
mu_spp <- mu %>%
map_dbl(function(x){
rnorm(n = 1, mean = x, sd = (1+x)*1/nu[.x]) %>%
(function(z) ifelse(z < 0, 0, z))
}) %>%
replace(zero_idx, 0)
tibble(trait = mu_spp, mu = mu, spp = rep(.x, length(mu)))
}) %>%
mutate(x = rep(xseq, n_spp))
range(mu_df$trait)
mu_df %>%
ggplot(aes(x, trait, colour = as.character(spp))) +
geom_jitter(width = .5,alpha = 0.5) +
theme(legend.position = "none") +
theme_minimal()
mod <- rstan::stan_model("bayes/tolerance_curve_scnrm.stan")
stan_in <- list(
N = mu_df$trait %>% length(),
y = mu_df$trait,
x = mu_df$x,
numSpp = mu_df$spp %>% unique() %>% length(),
sppint = mu_df$spp,
a_pr_mu = 4, a_pr_sig = 2,
b_pr_mu = 4, b_pr_sig = 2,
c_pr_mu = 0, c_pr_sig = 2,
d_pr_mu = min(mu_df$x)*0.9, d_pr_sig = 2,
e_pr_mu = max(mu_df$x)*0.9, e_pr_sig = 2
)
stan_out <- sampling(mod, data = stan_in)
stan_out
posts <- extract(stan_out)
p <- "nu"
params <- c("a", "b", "c", "d", "e", "nu")
sim_val <- params %>% map(function(p){
qs <- apply(posts[[p]], 2, quantile, probs = c(0.025,0.975))
truth <- eval(parse(text = p))
lglz <- seq_along(truth) %>% map_lgl(~{
qs[1, .x] < truth[.x] & qs[2,.x] > truth[.x]
}) %>% mean()
probs <- 1:ncol(posts[[p]]) %>%
map_dbl(function(xx){mean(posts[[p]][,xx] > truth[xx])})
list(lglz = lglz, probs = probs)
})
names(sim_val) <- params
sim_val %>% map_dbl(~{.$lgl})
#sim_val %>% map(~{.$probs})
#source("tolerance_functions.R")
#number of samples along x
n_axis <- 5
n_reps <- 10
n_spp <- 3
#priors
a_pr_mu <- 4
a_pr_sig <- 2
b_pr_mu <- 4
b_pr_sig <- 2
c_pr_mu <- 0
c_pr_sig <- 2
d_pr_mu <- -1
d_pr_sig <- 2
e_pr_mu <- 7
e_pr_sig <- 2
#generate parameters
mu_a <- rnorm(1, a_pr_mu, a_pr_sig)
a <- truncnorm::rtruncnorm(n_spp, a = 2, mean = mu_a, sd = 1)
mu_b <- rnorm(1, b_pr_mu, b_pr_sig)
b <- truncnorm::rtruncnorm(n_spp, a = 2, mean = mu_b, sd = 1)
mu_c <- rnorm(1, c_pr_mu, c_pr_sig)
c <- truncnorm::rtruncnorm(n_spp, a = 0, mean = mu_c, sd = 1)
mu_d <- rnorm(1, d_pr_mu, d_pr_sig)
d <- rnorm(n_spp, mu_d, 1)
mu_e <- rnorm(1, e_pr_mu, e_pr_sig)
e <- rnorm(n_spp, mu_e, 1)
mu_nu <- truncnorm::rtruncnorm(1, a = 0, mean = 0, sd = 1)
nu <- rgamma(n_spp, shape = 10, scale = mu_nu)
(1/nu) %>% sort(decreasing = F)
#nu <- rbeta(n_spp, 1, 2)
#nu is insanse variably under prior, so limiting it this way for sims
#(nu <- rtruncnorm(n = n_spp, a = 0, mean = 0, sd = 1) )
#nu <- rep(0.01, n_spp)
#samples can be (-Inf, Inf) along x, but some positions will be more informative than others
x_lo <- rnorm(1, mean = mean(d), sd = .1)
x_hi <- rnorm(1, mean = mean(e), sd = .1)
if(x_lo > x_hi){
x_lo <- x_lo + x_hi
x_hi <- x_lo - x_hi
x_lo <- x_lo - x_hi
}
# xseq <- runif(n_axis, x_lo, x_hi) %>% sort() %>%
#   rep(each = n_reps)
xseq <- seq(x_lo, x_hi, length.out = n_axis) %>%
rep(each = n_reps)
mu_df <- 1:n_spp %>% map_df(~{
mu <- tolerance_mu(xs = xseq, a[.x], b[.x], c[.x], d[.x], e[.x])
zero_idx <- xseq < d[.x] | xseq > e[.x]
mu_spp <- mu %>%
map_dbl(function(x){
rnorm(n = 1, mean = x, sd = (1+x)*1/nu[.x]) %>%
(function(z) ifelse(z < 0, 0, z))
}) %>%
replace(zero_idx, 0)
tibble(trait = mu_spp, mu = mu, spp = rep(.x, length(mu)))
}) %>%
mutate(x = rep(xseq, n_spp))
range(mu_df$trait)
mu_df %>%
ggplot(aes(x, trait, colour = as.character(spp))) +
geom_jitter(width = .5,alpha = 0.5) +
theme(legend.position = "none") +
theme_minimal()
mod <- rstan::stan_model("bayes/tolerance_curve_scnrm.stan")
stan_in <- list(
N = mu_df$trait %>% length(),
y = mu_df$trait,
x = mu_df$x,
numSpp = mu_df$spp %>% unique() %>% length(),
sppint = mu_df$spp,
a_pr_mu = 4, a_pr_sig = 2,
b_pr_mu = 4, b_pr_sig = 2,
c_pr_mu = 0, c_pr_sig = 2,
d_pr_mu = min(mu_df$x)*0.9, d_pr_sig = 2,
e_pr_mu = max(mu_df$x)*0.9, e_pr_sig = 2
)
stan_out <- sampling(mod, data = stan_in)
stan_out
posts <- extract(stan_out)
p <- "nu"
params <- c("a", "b", "c", "d", "e", "nu")
sim_val <- params %>% map(function(p){
qs <- apply(posts[[p]], 2, quantile, probs = c(0.025,0.975))
truth <- eval(parse(text = p))
lglz <- seq_along(truth) %>% map_lgl(~{
qs[1, .x] < truth[.x] & qs[2,.x] > truth[.x]
}) %>% mean()
probs <- 1:ncol(posts[[p]]) %>%
map_dbl(function(xx){mean(posts[[p]][,xx] > truth[xx])})
list(lglz = lglz, probs = probs)
})
names(sim_val) <- params
sim_val %>% map_dbl(~{.$lgl})
#sim_val %>% map(~{.$probs})
#source("tolerance_functions.R")
#number of samples along x
n_axis <- 5
n_reps <- 10
n_spp <- 3
#priors
a_pr_mu <- 4
a_pr_sig <- 2
b_pr_mu <- 4
b_pr_sig <- 2
c_pr_mu <- 0
c_pr_sig <- 2
d_pr_mu <- -1
d_pr_sig <- 2
e_pr_mu <- 7
e_pr_sig <- 2
#generate parameters
mu_a <- rnorm(1, a_pr_mu, a_pr_sig)
a <- truncnorm::rtruncnorm(n_spp, a = 2, mean = mu_a, sd = 1)
mu_b <- rnorm(1, b_pr_mu, b_pr_sig)
b <- truncnorm::rtruncnorm(n_spp, a = 2, mean = mu_b, sd = 1)
mu_c <- rnorm(1, c_pr_mu, c_pr_sig)
c <- truncnorm::rtruncnorm(n_spp, a = 0, mean = mu_c, sd = 1)
mu_d <- rnorm(1, d_pr_mu, d_pr_sig)
d <- rnorm(n_spp, mu_d, 1)
mu_e <- rnorm(1, e_pr_mu, e_pr_sig)
e <- rnorm(n_spp, mu_e, 1)
mu_nu <- truncnorm::rtruncnorm(1, a = 0, mean = 0, sd = 1)
nu <- rgamma(n_spp, shape = 10, scale = mu_nu)
(1/nu) %>% sort(decreasing = F)
#nu <- rbeta(n_spp, 1, 2)
#nu is insanse variably under prior, so limiting it this way for sims
#(nu <- rtruncnorm(n = n_spp, a = 0, mean = 0, sd = 1) )
#nu <- rep(0.01, n_spp)
#samples can be (-Inf, Inf) along x, but some positions will be more informative than others
x_lo <- rnorm(1, mean = mean(d), sd = .1)
x_hi <- rnorm(1, mean = mean(e), sd = .1)
if(x_lo > x_hi){
x_lo <- x_lo + x_hi
x_hi <- x_lo - x_hi
x_lo <- x_lo - x_hi
}
# xseq <- runif(n_axis, x_lo, x_hi) %>% sort() %>%
#   rep(each = n_reps)
xseq <- seq(x_lo, x_hi, length.out = n_axis) %>%
rep(each = n_reps)
mu_df <- 1:n_spp %>% map_df(~{
mu <- tolerance_mu(xs = xseq, a[.x], b[.x], c[.x], d[.x], e[.x])
zero_idx <- xseq < d[.x] | xseq > e[.x]
mu_spp <- mu %>%
map_dbl(function(x){
rnorm(n = 1, mean = x, sd = (1+x)*1/nu[.x]) %>%
(function(z) ifelse(z < 0, 0, z))
}) %>%
replace(zero_idx, 0)
tibble(trait = mu_spp, mu = mu, spp = rep(.x, length(mu)))
}) %>%
mutate(x = rep(xseq, n_spp))
range(mu_df$trait)
mu_df %>%
ggplot(aes(x, trait, colour = as.character(spp))) +
geom_jitter(width = .5,alpha = 0.5) +
theme(legend.position = "none") +
theme_minimal()
mod <- rstan::stan_model("bayes/tolerance_curve_scnrm.stan")
stan_in <- list(
N = mu_df$trait %>% length(),
y = mu_df$trait,
x = mu_df$x,
numSpp = mu_df$spp %>% unique() %>% length(),
sppint = mu_df$spp,
a_pr_mu = 4, a_pr_sig = 2,
b_pr_mu = 4, b_pr_sig = 2,
c_pr_mu = 0, c_pr_sig = 2,
d_pr_mu = min(mu_df$x)*0.9, d_pr_sig = 2,
e_pr_mu = max(mu_df$x)*0.9, e_pr_sig = 2
)
stan_out <- sampling(mod, data = stan_in)
stan_out
posts <- extract(stan_out)
p <- "nu"
params <- c("a", "b", "c", "d", "e", "nu")
sim_val <- params %>% map(function(p){
qs <- apply(posts[[p]], 2, quantile, probs = c(0.025,0.975))
truth <- eval(parse(text = p))
lglz <- seq_along(truth) %>% map_lgl(~{
qs[1, .x] < truth[.x] & qs[2,.x] > truth[.x]
}) %>% mean()
probs <- 1:ncol(posts[[p]]) %>%
map_dbl(function(xx){mean(posts[[p]][,xx] > truth[xx])})
list(lglz = lglz, probs = probs)
})
names(sim_val) <- params
sim_val %>% map_dbl(~{.$lgl})
#sim_val %>% map(~{.$probs})
#source("tolerance_functions.R")
#number of samples along x
n_axis <- 5
n_reps <- 10
n_spp <- 3
#priors
a_pr_mu <- 4
a_pr_sig <- 2
b_pr_mu <- 4
b_pr_sig <- 2
c_pr_mu <- 0
c_pr_sig <- 2
d_pr_mu <- -1
d_pr_sig <- 2
e_pr_mu <- 7
e_pr_sig <- 2
#generate parameters
mu_a <- rnorm(1, a_pr_mu, a_pr_sig)
a <- truncnorm::rtruncnorm(n_spp, a = 2, mean = mu_a, sd = 1)
mu_b <- rnorm(1, b_pr_mu, b_pr_sig)
b <- truncnorm::rtruncnorm(n_spp, a = 2, mean = mu_b, sd = 1)
mu_c <- rnorm(1, c_pr_mu, c_pr_sig)
c <- truncnorm::rtruncnorm(n_spp, a = 0, mean = mu_c, sd = 1)
mu_d <- rnorm(1, d_pr_mu, d_pr_sig)
d <- rnorm(n_spp, mu_d, 1)
mu_e <- rnorm(1, e_pr_mu, e_pr_sig)
e <- rnorm(n_spp, mu_e, 1)
mu_nu <- truncnorm::rtruncnorm(1, a = 0, mean = 0, sd = 1)
nu <- rgamma(n_spp, shape = 10, scale = mu_nu)
(1/nu) %>% sort(decreasing = F)
#nu <- rbeta(n_spp, 1, 2)
#nu is insanse variably under prior, so limiting it this way for sims
#(nu <- rtruncnorm(n = n_spp, a = 0, mean = 0, sd = 1) )
#nu <- rep(0.01, n_spp)
#samples can be (-Inf, Inf) along x, but some positions will be more informative than others
x_lo <- rnorm(1, mean = mean(d), sd = .1)
x_hi <- rnorm(1, mean = mean(e), sd = .1)
if(x_lo > x_hi){
x_lo <- x_lo + x_hi
x_hi <- x_lo - x_hi
x_lo <- x_lo - x_hi
}
# xseq <- runif(n_axis, x_lo, x_hi) %>% sort() %>%
#   rep(each = n_reps)
xseq <- seq(x_lo, x_hi, length.out = n_axis) %>%
rep(each = n_reps)
mu_df <- 1:n_spp %>% map_df(~{
mu <- tolerance_mu(xs = xseq, a[.x], b[.x], c[.x], d[.x], e[.x])
zero_idx <- xseq < d[.x] | xseq > e[.x]
mu_spp <- mu %>%
map_dbl(function(x){
rnorm(n = 1, mean = x, sd = (1+x)*1/nu[.x]) %>%
(function(z) ifelse(z < 0, 0, z))
}) %>%
replace(zero_idx, 0)
tibble(trait = mu_spp, mu = mu, spp = rep(.x, length(mu)))
}) %>%
mutate(x = rep(xseq, n_spp))
range(mu_df$trait)
mu_df %>%
ggplot(aes(x, trait, colour = as.character(spp))) +
geom_jitter(width = .5,alpha = 0.5) +
theme(legend.position = "none") +
theme_minimal()
mod <- rstan::stan_model("bayes/tolerance_curve_scnrm.stan")
stan_in <- list(
N = mu_df$trait %>% length(),
y = mu_df$trait,
x = mu_df$x,
numSpp = mu_df$spp %>% unique() %>% length(),
sppint = mu_df$spp,
a_pr_mu = 4, a_pr_sig = 2,
b_pr_mu = 4, b_pr_sig = 2,
c_pr_mu = 0, c_pr_sig = 2,
d_pr_mu = min(mu_df$x)*0.9, d_pr_sig = 2,
e_pr_mu = max(mu_df$x)*0.9, e_pr_sig = 2
)
stan_out <- sampling(mod, data = stan_in)
stan_out
posts <- extract(stan_out)
p <- "nu"
params <- c("a", "b", "c", "d", "e", "nu")
sim_val <- params %>% map(function(p){
qs <- apply(posts[[p]], 2, quantile, probs = c(0.025,0.975))
truth <- eval(parse(text = p))
lglz <- seq_along(truth) %>% map_lgl(~{
qs[1, .x] < truth[.x] & qs[2,.x] > truth[.x]
}) %>% mean()
probs <- 1:ncol(posts[[p]]) %>%
map_dbl(function(xx){mean(posts[[p]][,xx] > truth[xx])})
list(lglz = lglz, probs = probs)
})
names(sim_val) <- params
sim_val %>% map_dbl(~{.$lgl})
#sim_val %>% map(~{.$probs})
