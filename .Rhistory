sum(posterior[p_grid < 0.2])
samples <- sample(p_grid, prob = posterior, size = 1e4, replace = T)
#3E1.
mean(samples < 0.2)
sum(posterior[p_grid < 0.2])
samples <- sample(p_grid, prob = posterior, size = 1e4, replace = T)
#3E1.
mean(samples < 0.2)
sum(posterior[p_grid < 0.2])
samples <- sample(p_grid, prob = posterior, size = 1e4, replace = T)
#3E1.
mean(samples < 0.2)
sum(posterior[p_grid < 0.2])
samples <- sample(p_grid, prob = posterior, size = 1e4, replace = T)
#3E1.
mean(samples < 0.2)
sum(posterior[p_grid < 0.2])
samples <- sample(p_grid, prob = posterior, size = 1e4, replace = T)
#3E1.
mean(samples < 0.2)
sum(posterior[p_grid < 0.2])
samples <- sample(p_grid, prob = posterior, size = 1e4, replace = T)
#3E1.
mean(samples < 0.2)
sum(posterior[p_grid < 0.2])
samples <- sample(p_grid, prob = posterior, size = 1e4, replace = T)
#3E1.
mean(samples < 0.2)
sum(posterior[p_grid < 0.2])
samples <- sample(p_grid, prob = posterior, size = 1e4, replace = T)
#3E1.
mean(samples < 0.2)
sum(posterior[p_grid < 0.2])
HPDI
HPDinterval
coda::HPDinterval
coda::HPDinterval
HDI <- function(values, percent=0.95){
sorted <- sort(values)
index <- floor(percent * length(sorted))
nCI <- length(sorted) - index
width <- rep(0, nCI)
for (i in 1:nCI){
width[i] <- sorted[i + index] - sorted[i]
}
HDImin <- sorted[which.min(width)]
HDImax <- sorted[which.min(width) + index]
HDIlim <- c(HDImin, HDImax)
return(HDIlim)
}
HPDI(samples, 0.66)
HDI(samples, 0.66)
c(dnorm(x = 100, mean = 10, sd = 2),
dnorm(x = 100, mean = 30, sd = 2))
x <- seq(-10, 100)
x <- seq(-10, 100)
c(dnorm(x, mean = 10, sd = 2),
dnorm(x, mean = 30, sd = 2))
c(dnorm(x, mean = 10, sd = 2),
plot(dnorm(x, mean = 30, sd = 2)))
plot(c(dnorm(x, mean = 10, sd = 2),
dnorm(x, mean = 30, sd = 2)))
x <- seq(-10, 100)
plot(c(dnorm(x, mean = 10, sd = 20),
dnorm(x, mean = 30, sd = 20)))
plot(c(dnorm(x, mean = 10, sd = 15),
dnorm(x, mean = 30, sd = 15)))
plot(c(dnorm(x, mean = 10, sd = 5),
dnorm(x, mean = 30, sd = 5)))
plot(c(dnorm(x, mean = 10, sd = 5),
dnorm(x, mean = 20, sd = 5)))
plot(c(dnorm(x, mean = 10, sd = 5),
dnorm(x, mean = 12, sd = 5)))
x <- seq(-10, 100)
plot(c(dnorm(x, mean = 10, sd = 5),
dnorm(x, mean = 12, sd = 5)))
plot(x, c(dnorm(x, mean = 10, sd = 5),
dnorm(x, mean = 12, sd = 5)))
x <- seq(-10, 100)
plot(x,
c(dnorm(x, mean = 10, sd = 5), dnorm(x, mean = 12, sd = 5)))
x <- seq(-10, 100)
plot(c(x,x),
c(dnorm(x, mean = 10, sd = 5), dnorm(x, mean = 12, sd = 5)))
plot(c(x,x),
c(dnorm(x, mean = 10, sd = 5), dnorm(x, mean = 20, sd = 5)))
c(rnorm(100, mean = 10, sd = 5), rnorm(100, mean = 20, sd = 5))
hist(c(rnorm(100, mean = 10, sd = 5), rnorm(100, mean = 20, sd = 5))
)
hist(c(rnorm(100, mean = 10, sd = 5), rnorm(100, mean = 30, sd = 5)))
bimod <- c(rnorm(100, mean = 10, sd = 5), rnorm(100, mean = 30, sd = 5))
HPDI(bimod, 0.7)
HPDI(bimod, 0.66)
quantile(bimod, c(lower, upper))
HPDI(bimod, 0.66)
quantile(bimod, c(lower, upper))
abline(v = HPDI(bimod, 0.66))
hist(bimod, breaks = 100)
abline(v = HPDI(bimod, 0.66))
quantile(bimod, c(lower, upper))
bimod <- c(rnorm(200, mean = 10, sd = 5), rnorm(100, mean = 30, sd = 5))
hist(bimod, breaks = 100)
abline(v = HPDI(bimod, 0.66))
quantile(bimod, c(lower, upper))
abline(v = quantile(bimod, c(lower, upper)), col = "blue")
x <- seq(-10, 100)
bimod <- c(rnorm(200, mean = 10, sd = 5), rnorm(100, mean = 30, sd = 5))
hist(bimod, breaks = 100)
abline(v = HPDI(bimod, 0.66))
abline(v = quantile(bimod, c(lower, upper)), col = "blue")
x <- seq(-10, 100)
bimod <- c(rnorm(200, mean = 10, sd = 5), rnorm(100, mean = 30, sd = 5))
hist(bimod, breaks = 100)
abline(v = HPDI(bimod, 0.66))
abline(v = quantile(bimod, c(lower, upper)), col = "blue")
x <- seq(-10, 100)
bimod <- c(rnorm(200, mean = 10, sd = 5), rnorm(100, mean = 30, sd = 5))
hist(bimod, breaks = 100)
abline(v = HPDI(bimod, 0.66))
abline(v = quantile(bimod, c(lower, upper)), col = "blue")
x <- seq(-10, 100)
bimod <- c(rnorm(200, mean = 10, sd = 5), rnorm(100, mean = 30, sd = 5))
hist(bimod, breaks = 100)
abline(v = HPDI(bimod, 0.66))
abline(v = quantile(bimod, c(lower, upper)), col = "blue")
x <- seq(-10, 100)
bimod <- c(rnorm(200, mean = 10, sd = 5), rnorm(100, mean = 30, sd = 5))
hist(bimod, breaks = 100)
abline(v = HPDI(bimod, 0.66))
abline(v = quantile(bimod, c(lower, upper)), col = "blue")
x <- seq(-10, 100)
bimod <- c(rnorm(200, mean = 10, sd = 5), rnorm(100, mean = 30, sd = 5))
hist(bimod, breaks = 100)
abline(v = HPDI(bimod, 0.66))
abline(v = quantile(bimod, c(lower, upper)), col = "blue")
x <- seq(-10, 100)
bimod <- c(rnorm(200, mean = 10, sd = 5), rnorm(100, mean = 30, sd = 5))
hist(bimod, breaks = 100)
abline(v = HPDI(bimod, 0.66))
abline(v = quantile(bimod, c(lower, upper)), col = "blue")
x <- seq(-10, 100)
bimod <- c(rnorm(200, mean = 10, sd = 5), rnorm(100, mean = 30, sd = 5))
hist(bimod, breaks = 100)
abline(v = HPDI(bimod, 0.66))
abline(v = quantile(bimod, c(lower, upper)), col = "blue")
x <- seq(-10, 100)
bimod <- c(rnorm(200, mean = 10, sd = 5), rnorm(100, mean = 30, sd = 5))
hist(bimod, breaks = 100)
abline(v = HPDI(bimod, 0.66))
abline(v = quantile(bimod, c(lower, upper)), col = "blue")
x <- seq(-10, 100)
bimod <- c(rnorm(200, mean = 10, sd = 5), rnorm(100, mean = 30, sd = 5))
hist(bimod, breaks = 100)
abline(v = HPDI(bimod, 0.66))
abline(v = quantile(bimod, c(lower, upper)), col = "blue")
x <- seq(-10, 100)
bimod <- c(rnorm(200, mean = 10, sd = 5), rnorm(100, mean = 30, sd = 5))
hist(bimod, breaks = 100)
abline(v = HPDI(bimod, 0.66))
abline(v = quantile(bimod, c(lower, upper)), col = "blue")
x <- seq(-10, 100)
bimod <- c(rnorm(200, mean = 10, sd = 5), rnorm(100, mean = 30, sd = 5))
hist(bimod, breaks = 100)
abline(v = HPDI(bimod, 0.66))
abline(v = quantile(bimod, c(lower, upper)), col = "blue")
xx <- seq(-2, 2, length.out = 100)
plot(xx, 4 + exp(-xx))
plot(xx, 4 - exp(-xx))
plot(xx, 4 - exp(-xx))
plot(xx, 4 - exp(-xx*.5))
plot(xx, 4 - exp(-xx*0.5))
plot(xx, 4 - exp(-xx*0.05))
plot(xx, 4 - exp(-xx*0.5))
plot(xx, 4 - exp(-xx))
plot(xx, 4 - exp(-xx))
plot(xx, 4 - exp(-(xx-1)))
plot(xx, 4 - exp(-(xx-1)))
plot(xx, 4 - exp(-xx))
plot(xx, 4 - exp(-xx)-1)
plot(xx, 4 - exp(-xx))
plot(xx, 4 - exp(-(xx+1)))
plot(xx, 4 - exp(-(xx+1)))
plot(xx, 4 - exp(-xx))
plot(xx, 4 - exp(-(xx+1)))
plot(xx, 4 - exp(-xx))
plot(xx, 4 - exp(-xx+10))
plot(xx, 4 - exp(-xx))
plot(xx, (4 - exp(-xx)-1))
plot(xx, 4 - exp(-xx))
plot(xx, 4 - (exp(-xx)-1))
plot(xx, 4 - exp(-xx))
plot(xx, 4 - exp(-xx*2))
a <- 10
a
a
a
taco_yum
taco_yum
taco_yum <- "Beans, meat, cheese, tortilla, and lettuce."
taco_yum
3467 - 43546
3467 + 43546
6*8
8/2
log(x = 1000, base = 10)
10^(10)
vec_char <- c("To be or not to be", "that is the question")
vec_num <- c(1.3, 1, 44, -5.6, 1e4)
vec_int <- c(1,2,3,4,5)
vec_a <- c(1, 5.6, 2, 44, 10)
vec_b <- c(13, 5, 56, 4, 10.2)
vec_a + vec_b
vec_a * vec_b
iris
head(iris)
iris$Species
iris$Species
iris$Sepal.Width * iris$Sepal.Length
area <- iris$Sepal.Width * iris$Sepal.Length
area
iris$area <- iris$Sepal.Width * iris$Sepal.Length
iris
num_vec <- c(45.7, 98, 3, 34, 44.6, NA)
num_vec <- c(45.7, 98, 3, 34, 44.6, NA)
mean(num_vec, na.rm = T) #this argument na.rm says we'll ignore missing values for the calculation
mean(num_vec) #this argument na.rm says we'll ignore missing values for the calculation
mean(num_vec, na.rm = T) #this argument na.rm says we'll ignore missing values for the calculation
median(num_vec, na.rm = T)
var(num_vec, na.rm = T)
sd(num_vec, na.rm = T)
"setosa" == "something else"
"setosa" == "setosa"
subset(iris, Species == "setosa")
setosa
setosa <- subset(iris, Species == "setosa")
setosa
var(setosa$Sepal.Length, na.rm = T)
var(setosa$Sepal.Length)
num_vec <- c(45.7, 98, 3, 34, 44.6, NA)
mean(num_vec) #this argument na.rm says we'll ignore missing values for the calculation
setosa$log_sepal_length <- log(setosa$Sepal.Length)
hist(setosa$log_sepal_length,
main = "")
abline(v = mean(setosa$log_sepal_length), col = "red", lwd = 3)
#histograms
hist(setosa$log_sepal_length,
main = "")
#add mean line to plot
abline(v = mean(setosa$log_sepal_length), col = "red", lwd = 3)
mean(setosa$log_sepal_length)
sd(setosa$log_sepal_length)
plot(x = setosa$Sepal.Length, y = setosa$Sepal.Width)
cor(x = setosa$Sepal.Length, y = setosa$Sepal.Width)
library(tidyverse)
a <- 10
a <- 10
a
a
taco_yum <- "Beans, meat, cheese, tortilla, and lettuce."
taco_yum
3467 - 43546
3467 + 43546
6*8
8/2
log(x = 1000, base = 10)
10^(10)
vec_a <- c(1, 5.6, 2, 44, 10)
vec_b <- c(13, 5, 56, 4, 10.2)
vec_a + vec_b
vec_a * vec_b
iris
head(iris)
library(tidyverse) #if this command fails, you need to install this package.
iris %>% head
num_vec %>% mean(na.rm=T) #this argument after 'mean' says we'll ignore missing values for the calculation
num_vec %>% mean #this argument after 'mean' says we'll ignore missing values for the calculation
num_vec %>% mean(na.rm=T) #this argument after 'mean' says we'll ignore missing values for the calculation
num_vec %>% var(na.rm=T)
num_vec %>% sd(na.rm=T)
"setosa" == "viriginca"
"setosa" == "setosa"
setosa <- iris %>% filter(Species == "setosa")
setosa
setosa <- setosa %>% mutate(log_sepal_length = log(Sepal.Length))
setosa <- setosa %>% mutate(log_sepal_length = log(Sepal.Length))
setosa %>% ggplot(aes(x = log_sepal_length)) +
geom_histogram()
setosa %>% ggplot(aes(x = log_sepal_length)) +
geom_histogram() +
geom_vline(aes(xintercept=mean(log_sepal_length)),
lwd = 2, col = "red")
setosa %>% summarise(mean(log_sepal_length), sd(log_sepal_length))
setosa %>% ggplot(aes(x = log_sepal_length)) +
geom_histogram() +
geom_vline(aes(xintercept=2),
lwd = 2, col = "red")
setosa %>% ggplot(aes(x = log_sepal_length)) +
geom_histogram() +
geom_hline(aes(xintercept=2),
lwd = 2, col = "red")
setosa %>% ggplot(aes(x = log_sepal_length)) +
geom_histogram() +
geom_hline(aes(yintercept=2),
lwd = 2, col = "red")
setosa %>% ggplot(aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
setosa %>% ggplot(aes(x = Sepal.Length, y = Sepal.Width)) +
geom_hex()
setosa %>% ggplot(aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
setwd("~/Documents/Projects/tolerance-curve2/")
source("load_data.R")
source("derived_files/lasth_100_post.R")
source("derived_files/state_reg.R") #for reg_df
draws <- read_csv("bayes/stan_par1_df.csv") #draws for penalized zero model
library(nlme)
library(rlang)
library(ggrepel)
library(GGally)
library(phylolm)
gradient <- read.xls("data/Pool depths_FINAL summary_REVISED.xls",
header = T, skip = 1, stringsAsFactors = F) %>%
mutate(taxa = strsplit(X, "_") %>% map_chr(~ .x[length(.x)]),
taxa = ifelse(taxa == "deblilis", "debilis", taxa)) %>%
filter(taxa %in% as.character(unique(emery$Species)))
droppers <- which(gradient %>% select(-taxa, -X) %>% apply(1, function(x) mean(is.na(x))) == 1)
gradient <- gradient[-droppers,]
tree_miss <- as.character(unique(emery$Species))[!as.character(unique(emery$Species)) %in% unique(gradient$taxa)]
unique(gradient$taxa)[!unique(gradient$taxa) %in% as.character(unique(emery$Species))]
col_match <- match(gradient$taxa, as.character(unique(emery$Species)))
col_match <- col_match[!is.na(col_match)]
col_match
grad <- gradient %>% select(Mean, taxa) %>%
rename(Species = taxa)
draws_join <- full_join(x = draws, y = grad, by = "Species") %>%
full_join(., reg_df, by = "Species") %>%
gather(param_name, param_value,
-c(draw, Species, Mean, habit, aqua_terr2terr, aqua_terr2vernal))
param_names <- c("area", "d", "maxima", "e", "c", "special", "breadth")
max_draws <- draws_join %>%
filter(param_name %in% param_names) %>%
group_by(Species, param_name) %>%
summarise_all(.funs = max)
test_df <- wide_params %>% filter(draw == 20, Species %in% grad$Species) %>%
as.data.frame %>% set_rownames(.$Species)
draws_join %>%
filter(param_name %in% param_names) %>%
ggplot(aes(x = Mean, y = param_value, colour = Species)) +
geom_jitter(alpha = 0.05) +
facet_wrap(~param_name, scales = "free") +
#geom_label_repel(data = max_draws,
#          aes(x = Mean, y = param_value, label = Species), colour = "dodgerblue") +
theme_bw() +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
wide_params <- full_join(x = draws, y = grad, by = "Species") %>%
full_join(., reg_df, by = "Species")
wide_params <- wide_params %>%
select(-Species, -draw, -Mean, -habit, -aqua_terr2terr, -aqua_terr2vernal) %>%
scale %>%
as_tibble %>%
set_colnames( paste0(names(.), "_sc" )) %>%
bind_cols(., wide_params) %>%
mutate(
aqua_terr2terr_bin = ifelse(
aqua_terr2terr == "vernal", 0, 1
),
aqua_terr2vernal_bin = ifelse(
aqua_terr2vernal == "vernal", 0, 1
)
)
wide_params <- full_join(x = draws, y = grad, by = "Species") %>%
full_join(., reg_df, by = "Species") %>%
select(-Species, -draw, -Mean, -habit, -aqua_terr2terr, -aqua_terr2vernal) %>%
scale %>%
as_tibble %>%
set_colnames( paste0(names(.), "_sc" )) %>%
bind_cols(., wide_params) %>%
mutate(
aqua_terr2terr_bin = ifelse(
aqua_terr2terr == "vernal", 0, 1
),
aqua_terr2vernal_bin = ifelse(
aqua_terr2vernal == "vernal", 0, 1
)
)
rm(wide_params)
wide_params <- full_join(x = draws, y = grad, by = "Species") %>%
full_join(., reg_df, by = "Species") %>%
select(-Species, -draw, -Mean, -habit, -aqua_terr2terr, -aqua_terr2vernal) %>%
scale %>%
as_tibble %>%
set_colnames( paste0(names(.), "_sc" )) %>%
bind_cols(., wide_params) %>%
mutate(
aqua_terr2terr_bin = ifelse(
aqua_terr2terr == "vernal", 0, 1
),
aqua_terr2vernal_bin = ifelse(
aqua_terr2vernal == "vernal", 0, 1
)
)
wide_params <- full_join(x = draws, y = grad, by = "Species") %>%
full_join(., reg_df, by = "Species")
wide_params <- wide_params %>%
select(-Species, -draw, -Mean, -habit, -aqua_terr2terr, -aqua_terr2vernal) %>%
scale %>%
as_tibble %>%
set_colnames( paste0(names(.), "_sc" )) %>%
bind_cols(., wide_params) %>%
mutate(
aqua_terr2terr_bin = ifelse(
aqua_terr2terr == "vernal", 0, 1
),
aqua_terr2vernal_bin = ifelse(
aqua_terr2vernal == "vernal", 0, 1
)
)
wide_params <- full_join(x = draws, y = grad, by = "Species") %>%
full_join(., reg_df, by = "Species")
wide_params
wide_params <- wide_params %>%
select(-Species, -draw, -Mean, -habit, -aqua_terr2terr, -aqua_terr2vernal) %>%
scale %>%
as_tibble %>%
set_colnames( paste0(names(.), "_sc" )) %>%
bind_cols(., wide_params) %>%
mutate(
aqua_terr2terr_bin = ifelse(
aqua_terr2terr == "vernal", 0, 1
),
aqua_terr2vernal_bin = ifelse(
aqua_terr2vernal == "vernal", 0, 1
)
)
wide_params %>%
ggplot(aes(x = .$maxima_sc, y = .$e_sc, colour = Species)) +
geom_point()
wide_params %>%
select(Species, maxima, area, d, e, breadth) %>%
ggpairs(aes(colour = Species, alpha = 0.1))
test_df <- wide_params %>% filter(draw == 20, Species %in% grad$Species) %>%
as.data.frame %>% set_rownames(.$Species)
glm(aqua_terr2terr_bin ~ c_sc + d_sc + e_sc,
data = test_df,
family = binomial)
aqua_terr2terr_bin
wide_params <- wide_params %>%
select(-Species, -draw, -Mean, -habit, -aqua_terr2terr, -aqua_terr2vernal) %>%
scale %>%
as_tibble %>%
set_colnames( paste0(names(.), "_sc" )) %>%
bind_cols(., wide_params) %>%
mutate(
aqua_terr2terr_bin = ifelse(
aqua_terr2terr == "vernal", 0, 1
),
aqua_terr2vernal_bin = ifelse(
aqua_terr2vernal == "vernal", 0, 1
)
)
test_df <- wide_params %>% filter(draw == 20, Species %in% grad$Species) %>%
as.data.frame %>% set_rownames(.$Species)
glm(aqua_terr2terr_bin ~ c_sc + d_sc + e_sc,
data = test_df,
family = binomial)
test_df$aqua_terr2terr_bin
test_df$aqua_terr2terr_bin
glm(aqua_terr2terr_bin ~ c_sc,
data = test_df,
family = binomial)
glm(aqua_terr2terr_bin ~ c_sc + e_sc,
data = test_df,
family = binomial)
glm(aqua_terr2terr_bin ~ c_sc + d_sc + e_sc,
data = test_df,
family = binomial)
glm(aqua_terr2terr_bin ~ c_sc + e_sc,
data = test_df,
family = binomial)
test_df <- wide_params %>% filter(draw == 200, Species %in% grad$Species) %>%
as.data.frame %>% set_rownames(.$Species)
glm(aqua_terr2terr_bin ~ c_sc + e_sc,
data = test_df,
family = binomial)
glm(aqua_terr2terr_bin ~ e_sc,
data = test_df,
family = binomial)
glm(aqua_terr2terr_bin ~ e_sc,
data = test_df,
family = binomial)
glm(aqua_terr2terr_bin ~ c_sc + e_sc,
data = test_df,
family = binomial)
test_df <- wide_params %>% filter(draw == 20, Species %in% grad$Species) %>%
as.data.frame %>% set_rownames(.$Species)
test_df
glm(aqua_terr2terr_bin ~ c_sc + d_sc + e_sc,
data = test_df,
family = binomial, method = "model.frame")
glm(aqua_terr2terr_bin ~ c_sc + d_sc + e_sc,
data = test_df,
family = binomial, method = "model.frame")
glm(aqua_terr2terr_bin ~ c_sc + d_sc + e_sc,
data = test_df,
family = binomial)
?glm
glm.fit(aqua_terr2terr_bin ~ c_sc + d_sc + e_sc,
data = test_df,
family = binomial)
glm(aqua_terr2terr_bin ~ c_sc + d_sc + e_sc,
data = test_df,
family = binomial)
