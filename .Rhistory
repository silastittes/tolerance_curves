challenge_data$c[.x],
challenge_data$d[.x],
e=challenge_data$e[.x]
) %>%
do.call(cbind, .) %>%
set_colnames(paste0(c("x_", "y_"), .x)) %>%
as_tibble
seq_along(challenge_data$a) %>% map(~{
plot_kumara(
xs = seq(0, 1, length.out = 100),
a = challenge_data$a[.x],
challenge_data$b[.x],
challenge_data$c[.x],
challenge_data$d[.x],
e=challenge_data$e[.x]
) %>%
do.call(cbind, .) %>%
set_colnames(paste0(c("x_", "y_"), .x)) %>%
as_tibble
}) %>%
do.call(cbind, .)
seq_along(challenge_data$a) %>% map(~{
plot_kumara(
xs = seq(0, 1, length.out = 100),
a = challenge_data$a[.x],
challenge_data$b[.x],
challenge_data$c[.x],
challenge_data$d[.x],
e=challenge_data$e[.x]
) %>%
do.call(cbind, .) %>%
set_colnames(paste0(c("x", "y"))) %>%
as_tibble
})
ideal_out
params <- c("d", "e", "a", "b", "c", "beta_0", "beta_1", "nu")
par_df <- ideal_out$sim_results$stan_posts %>% map(function(y){
ideal_out$sim_results$stan_posts
par_df <- ideal_out$sim_results$stan_posts %>% map(function(y){
par_df <- ideal_out$sim_results$stan_posts %>% map(function(y){
y[[.x]] %>%
data.frame() %>%
gather("Species", x) %>%
set_colnames(c("Species", .x)) %>%
group_by(Species) %>%
mutate(draw = 1:n())
params %>% map( ~{
y[[.x]] %>%
data.frame() %>%
gather("Species", x) %>%
set_colnames(c("Species", .x)) %>%
group_by(Species) %>%
mutate(draw = 1:n())
})
}
par_df <- ideal_out$sim_results$stan_posts %>% map(function(y){
params %>% map( ~{
y[[.x]] %>%
data.frame() %>%
gather("Species", x) %>%
set_colnames(c("Species", .x)) %>%
group_by(Species) %>%
mutate(draw = 1:n())
})
})
par_df
seq_along(challenge_data$a) %>% map(~{
plot_kumara(
xs = seq(0, 1, length.out = 100),
a = challenge_data$a[.x],
challenge_data$b[.x],
challenge_data$c[.x],
challenge_data$d[.x],
e=challenge_data$e[.x]
) %>%
do.call(cbind, .) %>%
set_colnames(paste0(c("x", "y"))) %>%
mutate(Species = paste0("X", .x))
as_tibble
})
seq_along(challenge_data$a) %>% map(~{
plot_kumara(
xs = seq(0, 1, length.out = 100),
a = challenge_data$a[.x],
challenge_data$b[.x],
challenge_data$c[.x],
challenge_data$d[.x],
e=challenge_data$e[.x]
) %>%
do.call(cbind, .) %>%
set_colnames(paste0(c("x", "y"))) %>%
as_tibble %>%
mutate(Species = paste0("X", .x))
})
seq_along(challenge_data$a) %>% map(~{
plot_kumara(
xs = seq(0, 1, length.out = 100),
a = challenge_data$a[.x],
challenge_data$b[.x],
challenge_data$c[.x],
challenge_data$d[.x],
e=challenge_data$e[.x]
) %>%
do.call(cbind, .) %>%
set_colnames(paste0(c("x", "y"))) %>%
as_tibble %>%
mutate(Species = paste0("X", .x))
})
#Make the "true" curves for each species
seq_along(challenge_data$a) %>% map(~{
plot_kumara(
xs = seq(0, 1, length.out = 100),
a = challenge_data$a[.x],
challenge_data$b[.x],
challenge_data$c[.x],
challenge_data$d[.x],
e=challenge_data$e[.x]
) %>%
do.call(cbind, .) %>%
set_colnames(paste0(c("x", "y"))) %>%
as_tibble %>%
mutate(Species = paste0("X", .x))
})
#Make the "true" curves for each species
seq_along(challenge_data$a) %>% map_df(~{
plot_kumara(
xs = seq(0, 1, length.out = 100),
a = challenge_data$a[.x],
challenge_data$b[.x],
challenge_data$c[.x],
challenge_data$d[.x],
e=challenge_data$e[.x]
) %>%
do.call(cbind, .) %>%
set_colnames(paste0(c("x", "y"))) %>%
as_tibble %>%
mutate(Species = paste0("X", .x))
})
#function to visualize data, fit, and gam fit
plot_sim_out <- function(out){
#Make the "true" curves for each species
true_tol <- seq_along(out$sim_data$a) %>%
map_df(~{
plot_kumara(
seq(0, 1, length.out = 100),
out$sim_data$a[.x],
out$sim_data$b[.x],
out$sim_data$c[.x],
out$sim_data$d[.x],
out$sim_data$e[.x]
) %>%
do.call(cbind, .) %>%
set_colnames(paste0(c("x", "y"))) %>%
as_tibble %>%
mutate(Species = paste0("X", .x))
})
params <- c("d", "e", "a", "b", "c", "beta_0", "beta_1", "nu")
par_df <- out$sim_results$stan_posts %>% map(function(y){
params %>% map( ~{
y[[.x]] %>%
data.frame() %>%
gather("Species", x) %>%
set_colnames(c("Species", .x)) %>%
group_by(Species) %>%
mutate(draw = 1:n())
}) %>%
do.call(cbind, .) %>%
subset(., select=which(!duplicated(names(.))))
})
par_set1 <- par_df[[1]] %>% group_by(Species) %>%
map_kumara(seq(0,1, length.out = 100), .)
par_set2 <- par_df[[2]] %>% group_by(Species) %>%
map_kumara2(seq(0,1, length.out = 100), .)
data_plot <- out$sim_data$sim_data %>%
mutate(Species = paste0("X",spp))
ggplot() +
geom_line(data = par_set1, aes(x=x, y=y, group=as.character(draw)), alpha = 0.05, colour = "dodgerblue") +
geom_line(data = par_set2, aes(x=x, y=y, group=as.character(draw)), alpha = 0.05, colour = "yellow") +
geom_jitter(data = data_plot, mapping = aes(x = treat, y = y),
height = 0, width = 0.1, alpha = 0.5) +
facet_wrap(~Species, scales = "free_y") +
geom_smooth(data = data_plot, aes(x=treat, y=y), se = F, colour = "green") +
geom_line(data = true_tol, aes(x = x, y = y), colour = "blue")
theme_minimal()
}
plot_sim_out(ideal_out)
warnings()
true_tol
ideal_out$sim_data$a
ideal_out$sim_data$sim_data$treat_x
ideal_out$sim_data$sim_data$y
#function to visualize data, fit, and gam fit
plot_sim_out <- function(out){
#Make the "true" curves for each species
true_tol <- seq_along(out$sim_data$a) %>%
map_df(~{
plot_kumara(
seq(0, 1, length.out = 100),
out$sim_data$a[.x],
out$sim_data$b[.x],
out$sim_data$c[.x],
out$sim_data$d[.x],
out$sim_data$e[.x]
) %>%
do.call(cbind, .) %>%
set_colnames(paste0(c("x", "y"))) %>%
as_tibble %>%
mutate(Species = paste0("X", .x))
})
params <- c("d", "e", "a", "b", "c", "beta_0", "beta_1", "nu")
par_df <- out$sim_results$stan_posts %>% map(function(y){
params %>% map( ~{
y[[.x]] %>%
data.frame() %>%
gather("Species", x) %>%
set_colnames(c("Species", .x)) %>%
group_by(Species) %>%
mutate(draw = 1:n())
}) %>%
do.call(cbind, .) %>%
subset(., select=which(!duplicated(names(.))))
})
par_set1 <- par_df[[1]] %>% group_by(Species) %>%
map_kumara(seq(0,1, length.out = 100), .)
par_set2 <- par_df[[2]] %>% group_by(Species) %>%
map_kumara2(seq(0,1, length.out = 100), .)
data_plot <- out$sim_data$sim_data %>%
mutate(Species = paste0("X",spp))
ggplot() +
geom_line(data = par_set1, aes(x=x, y=y, group=as.character(draw)), alpha = 0.05, colour = "dodgerblue") +
geom_line(data = par_set2, aes(x=x, y=y, group=as.character(draw)), alpha = 0.05, colour = "yellow") +
geom_jitter(data = data_plot, mapping = aes(x = treat, y = y),
height = 0, width = 0.1, alpha = 0.5) +
facet_wrap(~Species, scales = "free_y") +
geom_smooth(data = data_plot, aes(x=treat, y=y), se = F, colour = "green") +
geom_line(data = true_tol, aes(x = x, y = y), colour = "blue") +
theme_minimal()
}
plot_sim_out(ideal_out)
warnings()
plot_sim_out(challenge_out)
challenge_out <- list(sim_data=challenge_data, sim_results=challenge_results)
challenge_results <- stan_tolerance(challenge_data)
challenge_out <- list(sim_data=challenge_data, sim_results=challenge_results)
plot_sim_out(challenge_out)
plot_sim_out(ideal_out)
sim_table(ideal_out)
#function to visualize data, fit, and gam fit
plot_sim_out <- function(out){
#Make the "true" curves for each species
true_tol <- seq_along(out$sim_data$a) %>%
map_df(~{
plot_kumara(
seq(0, 1, length.out = 100),
out$sim_data$a[.x],
out$sim_data$b[.x],
out$sim_data$c[.x],
out$sim_data$d[.x],
out$sim_data$e[.x]
) %>%
do.call(cbind, .) %>%
set_colnames(paste0(c("x", "y"))) %>%
as_tibble %>%
mutate(Species = paste0("X", .x))
})
params <- c("d", "e", "a", "b", "c", "beta_0", "beta_1", "nu")
par_df <- out$sim_results$stan_posts %>% map(function(y){
params %>% map( ~{
y[[.x]] %>%
data.frame() %>%
gather("Species", x) %>%
set_colnames(c("Species", .x)) %>%
group_by(Species) %>%
mutate(draw = 1:n())
}) %>%
do.call(cbind, .) %>%
subset(., select=which(!duplicated(names(.))))
})
par_set1 <- par_df[[1]] %>% group_by(Species) %>%
map_kumara(seq(0,1, length.out = 100), .)
par_set2 <- par_df[[2]] %>% group_by(Species) %>%
map_kumara2(seq(0,1, length.out = 100), .)
data_plot <- out$sim_data$sim_data %>%
mutate(Species = paste0("X",spp))
ggplot() +
geom_line(data = par_set1, aes(x=x, y=y, group=as.character(draw)), alpha = 0.05, colour = "dodgerblue") +
geom_line(data = par_set2, aes(x=x, y=y, group=as.character(draw)), alpha = 0.05, colour = "yellow") +
geom_jitter(data = data_plot, mapping = aes(x = treat, y = y),
height = 0, width = 0.05, alpha = 0.5) +
facet_wrap(~Species, scales = "free_y") +
geom_smooth(data = data_plot, aes(x=treat, y=y), se = F, colour = "green") +
geom_line(data = true_tol, aes(x = x, y = y), colour = "white") +
theme_minimal()
}
plot_sim_out(ideal_out)
#function to visualize data, fit, and gam fit
plot_sim_out <- function(out){
#Make the "true" curves for each species
true_tol <- seq_along(out$sim_data$a) %>%
map_df(~{
plot_kumara(
seq(0, 1, length.out = 100),
out$sim_data$a[.x],
out$sim_data$b[.x],
out$sim_data$c[.x],
out$sim_data$d[.x],
out$sim_data$e[.x]
) %>%
do.call(cbind, .) %>%
set_colnames(paste0(c("x", "y"))) %>%
as_tibble %>%
mutate(Species = paste0("X", .x))
})
params <- c("d", "e", "a", "b", "c", "beta_0", "beta_1", "nu")
par_df <- out$sim_results$stan_posts %>% map(function(y){
params %>% map( ~{
y[[.x]] %>%
data.frame() %>%
gather("Species", x) %>%
set_colnames(c("Species", .x)) %>%
group_by(Species) %>%
mutate(draw = 1:n())
}) %>%
do.call(cbind, .) %>%
subset(., select=which(!duplicated(names(.))))
})
par_set1 <- par_df[[1]] %>% group_by(Species) %>%
map_kumara(seq(0,1, length.out = 100), .)
par_set2 <- par_df[[2]] %>% group_by(Species) %>%
map_kumara2(seq(0,1, length.out = 100), .)
data_plot <- out$sim_data$sim_data %>%
mutate(Species = paste0("X",spp))
ggplot() +
geom_line(data = par_set1, aes(x=x, y=y, group=as.character(draw)), alpha = 0.05, colour = "dodgerblue") +
geom_line(data = par_set2, aes(x=x, y=y, group=as.character(draw)), alpha = 0.05, colour = "yellow") +
geom_jitter(data = data_plot, mapping = aes(x = treat, y = y),
height = 0, width = 0.05, alpha = 0.5) +
facet_wrap(~Species, scales = "free_y") +
geom_smooth(data = data_plot, aes(x=treat, y=y), se = F, colour = "green") +
geom_line(data = true_tol, aes(x = x, y = y), colour = "blue", lwd = 2) +
theme_minimal()
}
plot_sim_out(ideal_out)
#function to visualize data, fit, and gam fit
plot_sim_out <- function(out){
#Make the "true" curves for each species
true_tol <- seq_along(out$sim_data$a) %>%
map_df(~{
plot_kumara(
seq(0, 1, length.out = 100),
out$sim_data$a[.x],
out$sim_data$b[.x],
out$sim_data$c[.x],
out$sim_data$d[.x],
out$sim_data$e[.x]
) %>%
do.call(cbind, .) %>%
set_colnames(paste0(c("x", "y"))) %>%
as_tibble %>%
mutate(Species = paste0("X", .x))
})
params <- c("d", "e", "a", "b", "c", "beta_0", "beta_1", "nu")
par_df <- out$sim_results$stan_posts %>% map(function(y){
params %>% map( ~{
y[[.x]] %>%
data.frame() %>%
gather("Species", x) %>%
set_colnames(c("Species", .x)) %>%
group_by(Species) %>%
mutate(draw = 1:n())
}) %>%
do.call(cbind, .) %>%
subset(., select=which(!duplicated(names(.))))
})
par_set1 <- par_df[[1]] %>% group_by(Species) %>%
map_kumara(seq(0,1, length.out = 100), .)
par_set2 <- par_df[[2]] %>% group_by(Species) %>%
map_kumara2(seq(0,1, length.out = 100), .)
data_plot <- out$sim_data$sim_data %>%
mutate(Species = paste0("X",spp))
ggplot() +
geom_line(data = par_set1, aes(x=x, y=y, group=as.character(draw)), alpha = 0.05, colour = "dodgerblue") +
geom_line(data = par_set2, aes(x=x, y=y, group=as.character(draw)), alpha = 0.05, colour = "yellow") +
geom_jitter(data = data_plot, mapping = aes(x = treat, y = y),
height = 0, width = 0.05, alpha = 0.5) +
facet_wrap(~Species, scales = "free_y") +
geom_smooth(data = data_plot, aes(x=treat, y=y), se = F, colour = "green") +
geom_line(data = true_tol, aes(x = x, y = y), colour = "blue", lwd = 1.1) +
theme_minimal()
}
plot_sim_out(ideal_out)
#function to visualize data, fit, and gam fit
plot_sim_out <- function(out){
#Make the "true" curves for each species
true_tol <- seq_along(out$sim_data$a) %>%
map_df(~{
plot_kumara(
seq(0, 1, length.out = 100),
out$sim_data$a[.x],
out$sim_data$b[.x],
out$sim_data$c[.x],
out$sim_data$d[.x],
out$sim_data$e[.x]
) %>%
do.call(cbind, .) %>%
set_colnames(paste0(c("x", "y"))) %>%
as_tibble %>%
mutate(Species = paste0("X", .x))
})
params <- c("d", "e", "a", "b", "c", "beta_0", "beta_1", "nu")
par_df <- out$sim_results$stan_posts %>% map(function(y){
params %>% map( ~{
y[[.x]] %>%
data.frame() %>%
gather("Species", x) %>%
set_colnames(c("Species", .x)) %>%
group_by(Species) %>%
mutate(draw = 1:n())
}) %>%
do.call(cbind, .) %>%
subset(., select=which(!duplicated(names(.))))
})
par_set1 <- par_df[[1]] %>% group_by(Species) %>%
map_kumara(seq(0,1, length.out = 100), .)
par_set2 <- par_df[[2]] %>% group_by(Species) %>%
map_kumara2(seq(0,1, length.out = 100), .)
data_plot <- out$sim_data$sim_data %>%
mutate(Species = paste0("X",spp))
ggplot() +
geom_line(data = par_set1, aes(x=x, y=y, group=as.character(draw)), alpha = 0.05, colour = "dodgerblue") +
geom_line(data = par_set2, aes(x=x, y=y, group=as.character(draw)), alpha = 0.05, colour = "yellow") +
geom_jitter(data = data_plot, mapping = aes(x = treat, y = y),
height = 0, width = 0.05, alpha = 0.5) +
facet_wrap(~Species, scales = "free_y") +
geom_smooth(data = data_plot, aes(x=treat, y=y),
se = F, colour = "green", alpha = 0.5) +
geom_line(data = true_tol, aes(x = x, y = y),
colour = "blue", lwd = 1.1, alpha = 0.5) +
theme_minimal()
}
plot_sim_out(ideal_out)
#function to visualize data, fit, and gam fit
plot_sim_out <- function(out){
#Make the "true" curves for each species
true_tol <- seq_along(out$sim_data$a) %>%
map_df(~{
plot_kumara(
seq(0, 1, length.out = 100),
out$sim_data$a[.x],
out$sim_data$b[.x],
out$sim_data$c[.x],
out$sim_data$d[.x],
out$sim_data$e[.x]
) %>%
do.call(cbind, .) %>%
set_colnames(paste0(c("x", "y"))) %>%
as_tibble %>%
mutate(Species = paste0("X", .x))
})
params <- c("d", "e", "a", "b", "c", "beta_0", "beta_1", "nu")
par_df <- out$sim_results$stan_posts %>% map(function(y){
params %>% map( ~{
y[[.x]] %>%
data.frame() %>%
gather("Species", x) %>%
set_colnames(c("Species", .x)) %>%
group_by(Species) %>%
mutate(draw = 1:n())
}) %>%
do.call(cbind, .) %>%
subset(., select=which(!duplicated(names(.))))
})
par_set1 <- par_df[[1]] %>% group_by(Species) %>%
map_kumara(seq(0,1, length.out = 100), .)
par_set2 <- par_df[[2]] %>% group_by(Species) %>%
map_kumara2(seq(0,1, length.out = 100), .)
data_plot <- out$sim_data$sim_data %>%
mutate(Species = paste0("X",spp))
ggplot() +
geom_line(data = par_set1, aes(x=x, y=y, group=as.character(draw)), alpha = 0.05, colour = "dodgerblue") +
geom_line(data = par_set2, aes(x=x, y=y, group=as.character(draw)), alpha = 0.05, colour = "yellow") +
geom_jitter(data = data_plot, mapping = aes(x = treat, y = y),
height = 0, width = 0.05, alpha = 0.5) +
facet_wrap(~Species, scales = "free_y") +
geom_smooth(data = data_plot, aes(x=treat, y=y),
se = F, colour = "green", alpha = 0.5, lwd = 0.5) +
geom_line(data = true_tol, aes(x = x, y = y),
colour = "blue", lwd = 0.5, alpha = 0.5) +
theme_minimal()
}
plot_sim_out(ideal_out)
library(shiny); runApp('~/Dropbox/popgen_modules/Coalescence/continuous_coalescence_app.R')
runApp('~/Dropbox/popgen_modules/Coalescence/continuous_coalescence_app.R')
runApp('~/Dropbox/popgen_modules/Coalescence/continuous_coalescence_app.R')
runApp('~/Dropbox/popgen_modules/Coalescence/continuous_coalescence_app.R')
runApp('~/Dropbox/popgen_modules/Coalescence/continuous_coalescence_app.R')
runApp('~/Dropbox/popgen_modules/Coalescence/continuous_coalescence_app.R')
runApp('~/Dropbox/popgen_modules/Coalescence/continuous_coalescence_app.R')
runApp('~/Dropbox/popgen_modules/Coalescence/continuous_coalescence_app.R')
runApp('~/Dropbox/popgen_modules/Coalescence/continuous_coalescence_app.R')
runApp('~/Dropbox/popgen_modules/Coalescence/continuous_coalescence_app.R')
runApp('~/Dropbox/popgen_modules/Coalescence/continuous_coalescence_app.R')
runApp('~/Dropbox/popgen_modules/Coalescence/continuous_coalescence_app.R')
runApp('~/Dropbox/popgen_modules/Coalescence/continuous_coalescence_app.R')
runApp('~/Dropbox/popgen_modules/Coalescence/continuous_coalescence_app.R')
runApp('~/Dropbox/popgen_modules/Coalescence/continuous_coalescence_app.R')
runApp('~/Dropbox/popgen_modules/Coalescence/continuous_coalescence_app.R')
runApp('~/Documents/shiny_popgen/Coalescence/continuous_coalescence_app.R')
detach("package:shiny", unload=TRUE)
library(shiny); runApp('~/Documents/shiny_popgen/Coalescence/continuous_coalescence_app.R')
runApp('~/Documents/shiny_popgen/Drift/drift_app.R')
emery
